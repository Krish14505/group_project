Index: lib/main.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/cupertino.dart';\r\nimport 'package:flutter/material.dart';\r\n\r\nimport 'Customer_Registration.dart';\r\n\r\nvoid main() {\r\n  runApp(const MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  const MyApp({super.key});\r\n\r\n  // This widget is the root of your application.\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    return MaterialApp(\r\n      //decides the routes of the pages for the application\r\n    routes: {\r\n        //it will be sorted & defined as key and value pairs\r\n      '/homePage' : (context) => MyHomePage(title: 'Airline Management',),\r\n      '/registerPage': (context) => CustomerRegistration(),\r\n      //add other pages that you have made.\r\n\r\n      },\r\n      initialRoute: '/homePage',\r\n      title: 'Home page',\r\n      debugShowCheckedModeBanner: false,\r\n      theme: ThemeData(\r\n        colorScheme: ColorScheme.fromSeed(seedColor: Colors.cyan),\r\n        useMaterial3: true,\r\n      ),\r\n\r\n    );\r\n\r\n  }\r\n}\r\n\r\nclass MyHomePage extends StatefulWidget {\r\n  const MyHomePage({super.key, required this.title});\r\n\r\n\r\n  final String title;\r\n\r\n  @override\r\n  State<MyHomePage> createState() => _MyHomePageState();\r\n}\r\n\r\nclass _MyHomePageState extends State<MyHomePage> {\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        backgroundColor: Theme.of(context).colorScheme.inversePrimary,\r\n        title: Text(widget.title),\r\n      ),\r\n      body: SingleChildScrollView(\r\n        child: Column(\r\n          mainAxisAlignment: MainAxisAlignment.center,\r\n          children: [\r\n            ElevatedButton(onPressed: registrationDirector, child: Text(\"Registration Page\"),),\r\n          ],\r\n        )\r\n\r\n      ),\r\n\r\n    );\r\n  }\r\n\r\n void registrationDirector() {\r\n   Navigator.pushNamed(context, '/registerPage');\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/main.dart b/lib/main.dart
--- a/lib/main.dart	
+++ b/lib/main.dart	
@@ -1,6 +1,7 @@
 import 'package:flutter/cupertino.dart';
 import 'package:flutter/material.dart';
 
+import 'CustomerListPage.dart';
 import 'Customer_Registration.dart';
 
 void main() {
@@ -20,8 +21,10 @@
         //it will be sorted & defined as key and value pairs
       '/homePage' : (context) => MyHomePage(title: 'Airline Management',),
       '/registerPage': (context) => CustomerRegistration(),
+      '/customerListPage': (context) => CustomerListPage(),
       //add other pages that you have made.
 
+
       },
       initialRoute: '/homePage',
       title: 'Home page',
Index: lib/Customer_Registration.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/cupertino.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:group_project/Customer.dart';\r\nimport 'package:group_project/CustomerDAO.dart';\r\n\r\nimport 'CustomerDatabase.dart';\r\n\r\nclass CustomerRegistration extends StatefulWidget {\r\n   String  title= \"Customer Registration Page\" ;\r\n\r\n  @override\r\n  State<CustomerRegistration> createState() {\r\n    return CustomerRegistrationState();\r\n  }\r\n\r\n}\r\n\r\nclass CustomerRegistrationState extends State<CustomerRegistration> {\r\n\r\n//variables should be defined here.\r\n//creating the dao object\r\nlate CustomerDAO customerdao ;\r\nList<Customer> customerLists= [];\r\n\r\n  ///declare all the variables used in the textfield.\r\n  late TextEditingController _firstName;\r\n  late TextEditingController _lastName;\r\n  late TextEditingController _email;\r\n  late TextEditingController _phoneNumber;\r\n  late TextEditingController _address;\r\n  late TextEditingController _birthday;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState(); // initialize all the late variables .\r\n    _firstName = TextEditingController();\r\n    _lastName = TextEditingController();\r\n    _email = TextEditingController();\r\n    _phoneNumber = TextEditingController();\r\n    _address = TextEditingController();\r\n    _birthday = TextEditingController();\r\n\r\n    //creating the database connection\r\n    $FloorCustomerDatabase.databaseBuilder(\"app_database.db\").build().then((database) {\r\n      customerdao = database.getCustomerDAO; // instantiate the database object\r\n\r\n      //fetch the customer from the customerList and put all into the database\r\n      customerdao.getAllCustomers().then((ListOfCustomers) {\r\n        customerLists.addAll(ListOfCustomers); // when loading the page , all the existing customer should be in the list.\r\n\r\n      });\r\n\r\n    });\r\n\r\n\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _firstName.dispose();\r\n    _lastName.dispose();\r\n    _email.dispose();\r\n    _phoneNumber.dispose();\r\n    _address.dispose();\r\n    _birthday.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    // TODO: implement build\r\n  return Scaffold(\r\n    appBar: AppBar(backgroundColor: Colors.cyan,title: Text(widget.title,style: TextStyle(color:Colors.white,fontWeight: FontWeight.bold)) ,),\r\n    body: SingleChildScrollView (\r\n      child: Column(\r\n        mainAxisAlignment: MainAxisAlignment.start,\r\n        children: <Widget>[\r\n\r\n          SizedBox(height: 20),\r\n          Text(\"Welcome to the Registration Page\",style: TextStyle(fontSize: 25,fontWeight: FontWeight.bold,fontStyle: FontStyle.italic)),\r\n\r\n\r\n          ///first row for the customer last name and first name.\r\n          Row(\r\n            mainAxisAlignment: MainAxisAlignment.start,\r\n            children: [\r\n              //column for the other field\r\n              Container(\r\n                width: 350, // Adjust the width as needed\r\n                padding: const EdgeInsets.all(10.0), // Optional: Add padding\r\n                margin: const EdgeInsets.all(10.0), // Optional: Add margin\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white, // Optional: Add background color\r\n                  borderRadius: BorderRadius.circular(10.0), // Optional: Add border radius\r\n\r\n                ),\r\n                child: TextField(controller: _firstName,\r\n                    decoration: InputDecoration(\r\n                        hintText:\"Enter  First Name\",\r\n                        border: OutlineInputBorder(),\r\n                        labelText: \"First Name\"\r\n                    )),\r\n              ),\r\n\r\n            ],\r\n          ),\r\n\r\n          Row (\r\n            mainAxisAlignment:  MainAxisAlignment.start,\r\n            children: [\r\n              //column for the other field\r\n              Container(\r\n                width: 350, // Adjust the width as needed\r\n                padding: const EdgeInsets.all(10.0), // Optional: Add padding\r\n                margin: const EdgeInsets.all(10.0), // Optional: Add margin\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white, // Optional: Add background color\r\n                  borderRadius: BorderRadius.circular(10.0), // Optional: Add border radius\r\n\r\n                ),\r\n                child: TextField(controller: _lastName,\r\n                    decoration: InputDecoration(\r\n                        hintText:\"Enter Last Name\",\r\n                        border: OutlineInputBorder(),\r\n                        labelText: \"Last Name\"\r\n                    )),\r\n              ),\r\n\r\n            ],\r\n          ),\r\n\r\n\r\n          Row(\r\n              mainAxisAlignment: MainAxisAlignment.start,\r\n\r\n              children: [\r\n                //column for the other field\r\n                Container(\r\n                  width: 350, // Adjust the width as needed\r\n                  padding: const EdgeInsets.all(10.0), // Optional: Add padding\r\n                  margin: const EdgeInsets.all(10.0), // Optional: Add margin\r\n                  decoration: BoxDecoration(\r\n                    color: Colors.white, // Optional: Add background color\r\n                    borderRadius: BorderRadius.circular(10.0), // Optional: Add border radius\r\n\r\n                  ),\r\n                  child: TextField(controller: _birthday,\r\n                      decoration: InputDecoration(\r\n                          hintText:\"Enter Date Of Birth\",\r\n                          border: OutlineInputBorder(),\r\n                          labelText: \"BirthDate\"\r\n                      )),\r\n                ),\r\n              ] ),\r\n          //Row for the Phone Number\r\n          Row (\r\n            mainAxisAlignment:  MainAxisAlignment.start,\r\n            children: [\r\n              Container(\r\n                width: 350, // Adjust the width as needed\r\n                padding: const EdgeInsets.all(10.0), // Optional: Add padding\r\n                margin: const EdgeInsets.all(10.0), // Optional: Add margin\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white, // Optional: Add background color\r\n                  borderRadius: BorderRadius.circular(10.0), // Optional: Add border radius\r\n\r\n                ),\r\n                child: TextField(controller: _email,\r\n                    decoration: InputDecoration(\r\n                        hintText:\"Enter Your Email address\",\r\n                        border: OutlineInputBorder(),\r\n                        labelText: \"Email\"\r\n                    )),\r\n              ),\r\n\r\n            ],),\r\n\r\n          //Row for the Phone Number\r\n          Row (\r\n            mainAxisAlignment:  MainAxisAlignment.start,\r\n            children: [\r\n              Container(\r\n                width: 350, // Adjust the width as needed\r\n                padding: const EdgeInsets.all(10.0), // Optional: Add padding\r\n                margin: const EdgeInsets.all(10.0), // Optional: Add margin\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white, // Optional: Add background color\r\n                  borderRadius: BorderRadius.circular(10.0), // Optional: Add border radius\r\n\r\n                ),\r\n                child: TextField(controller: _phoneNumber,\r\n                    decoration: InputDecoration(\r\n                        hintText:\"Enter phone number \",\r\n                        border: OutlineInputBorder(),\r\n                        labelText: \"PhoneNumber\"\r\n                    )),\r\n              ),\r\n\r\n            ],),\r\n//Row for the Phone Number\r\n          Row (\r\n            mainAxisAlignment:  MainAxisAlignment.start,\r\n            children: [\r\n              Container(\r\n                width: 350, // Adjust the width as needed\r\n                padding: const EdgeInsets.all(10.0), // Optional: Add padding\r\n                margin: const EdgeInsets.all(10.0), // Optional: Add margin\r\n                decoration: BoxDecoration(\r\n                  color: Colors.white, // Optional: Add background color\r\n                  borderRadius: BorderRadius.circular(10.0), // Optional: Add border radius\r\n\r\n                ),\r\n                child: TextField(controller: _address,\r\n                    decoration: InputDecoration(\r\n                        hintText:\"Enter Your Address\",\r\n                        border: OutlineInputBorder(),\r\n                        labelText: \"Address:\"\r\n                    )),\r\n              ),\r\n            ],),\r\n          //creating Register button to register the user as the customer\r\n          SizedBox(\r\n            width: 200, // Set the width of the button\r\n            height: 60, // Set the height of the button\r\n            child: ElevatedButton(\r\n              onPressed: registerCustomer,\r\n              child: Text(\"Register\", style: TextStyle(fontSize: 20)), // Adjust font size if needed\r\n            ),\r\n          ),\r\n\r\n\r\n        ],\r\n      ),\r\n\r\n    ),\r\n\r\n\r\n  );\r\n\r\n  }\r\n\r\n  void registerCustomer() {\r\n\r\n    if(_firstName.value.text ==  \"\"  || _lastName.value.text == \"\" || _email.value.text == \"\" || _phoneNumber.value.text == \"\" || _birthday.value\r\n        .text == \"\" || _address.value.text == \"\" ) {\r\n      showDialog<String>(\r\n        context: context,\r\n        builder: (BuildContext context) => AlertDialog(\r\n          title: const Text('Incomplete Registration! '),\r\n          content: const Text('Please Fill out all the fields.'),\r\n          actions: <Widget>[\r\n            ElevatedButton(onPressed: () => Navigator.pop(context, 'OK'),\r\n              child: const Text('OK'),),\r\n          ],\r\n        ),\r\n      );\r\n    }\r\n    //each of fields is filled then the following:\r\n    else {\r\n      var snackBar = SnackBar( content: Text('successfully Registered!', style: TextStyle(fontStyle: FontStyle.italic, fontSize: 18, color: Colors.green),) );\r\n      ScaffoldMessenger.of(context).showSnackBar(snackBar);\r\n      ///navigate to the list page\r\n       Navigator.pushNamed(context, \"/homePage\"); //redirect to the home page\r\n\r\n\r\n        //database stuff to add the customer\r\n        var newCustomer = Customer(Customer.ID++, _firstName.value.text, _lastName.value.text, _email.value.text, _phoneNumber.value.text, _address.value.text, _birthday.value.text);\r\n\r\n        //add to the list first\r\n         customerLists.add(newCustomer);\r\n\r\n        //invoking a method to insert the new customer into the table\r\n        customerdao.addCustomer(newCustomer);\r\n\r\n        //empty all the spaces.\r\n\r\n      _firstName.text = \" \";\r\n      _lastName.text =\" \";\r\n      _email.text =  \" \";\r\n      _phoneNumber.text =  \" \";\r\n      _address.text = \" \";\r\n      _birthday.text =  \" \";\r\n    }\r\n\r\n  }\r\n\r\n\r\n}
===================================================================
diff --git a/lib/Customer_Registration.dart b/lib/Customer_Registration.dart
--- a/lib/Customer_Registration.dart	
+++ b/lib/Customer_Registration.dart	
@@ -20,7 +20,8 @@
 //variables should be defined here.
 //creating the dao object
 late CustomerDAO customerdao ;
-List<Customer> customerLists= [];
+//creating the list of customer
+static List<Customer> customerLists= [];
 
   ///declare all the variables used in the textfield.
   late TextEditingController _firstName;
@@ -51,8 +52,6 @@
       });
 
     });
-
-
   }
 
   @override
@@ -66,11 +65,11 @@
     super.dispose();
   }
 
-
   @override
   Widget build(BuildContext context) {
     // TODO: implement build
   return Scaffold(
+    
     appBar: AppBar(backgroundColor: Colors.cyan,title: Text(widget.title,style: TextStyle(color:Colors.white,fontWeight: FontWeight.bold)) ,),
     body: SingleChildScrollView (
       child: Column(
@@ -261,7 +260,7 @@
       var snackBar = SnackBar( content: Text('successfully Registered!', style: TextStyle(fontStyle: FontStyle.italic, fontSize: 18, color: Colors.green),) );
       ScaffoldMessenger.of(context).showSnackBar(snackBar);
       ///navigate to the list page
-       Navigator.pushNamed(context, "/homePage"); //redirect to the home page
+       Navigator.pushNamed(context, "/customerListPage"); //redirect to the home page
 
 
         //database stuff to add the customer
Index: lib/CustomerListPage.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/cupertino.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:group_project/Customer.dart';\r\nimport 'package:group_project/CustomerDAO.dart';\r\n\r\nimport 'CustomerDatabase.dart';\r\n\r\n/**\r\n * This customer list page has two pages: first on the left-hand side it has all the customer\r\n * that are in the database and on the right-hand side the customer information page in the form view with two\r\n * buttons 1)update(saves the data) 2)delete(delete the customer from the database)\r\n */\r\nclass CustomerListPage extends StatefulWidget {\r\n  String title = \"Customer List Page\";\r\n\r\n  @override\r\n  State<CustomerListPage> createState() {\r\n    return CustomerListPageState();\r\n  }\r\n}\r\n\r\nclass CustomerListPageState extends State<CustomerListPage> {\r\n  //variables defined\r\n  late CustomerDAO customerdao ;\r\n  Customer ? selectedCustomer;\r\n\r\n  List<Customer> customerLists = [];\r\n  ///declare all the variables used in the textfield.\r\n  late TextEditingController _firstName;\r\n  late TextEditingController _lastName;\r\n  late TextEditingController _email;\r\n  late TextEditingController _phoneNumber;\r\n  late TextEditingController _address;\r\n  late TextEditingController _birthday;\r\n\r\n\r\n\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState(); // initialize all the late variables .\r\n    _firstName = TextEditingController();\r\n    _lastName = TextEditingController();\r\n    _email = TextEditingController();\r\n    _phoneNumber = TextEditingController();\r\n    _address = TextEditingController();\r\n    _birthday = TextEditingController();\r\n\r\n    //creating the database connection\r\n    $FloorCustomerDatabase.databaseBuilder(\"app_database.db\").build().then((database) {\r\n      customerdao = database.getCustomerDAO; // instantiate the database object\r\n\r\n      //fetch the customer from the customerList and put all into the database\r\n      customerdao.getAllCustomers().then((ListOfCustomers) {\r\n        customerLists.addAll(ListOfCustomers); // when loading the page , all the existing customer should be in the list.\r\n\r\n      });\r\n\r\n    });\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _firstName.dispose();\r\n    _lastName.dispose();\r\n    _email.dispose();\r\n    _phoneNumber.dispose();\r\n    _address.dispose();\r\n    _birthday.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        backgroundColor: Colors.cyan,\r\n        title: Text(widget.title,style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),\r\n      ),\r\n      body: responsiveLayout(),\r\n    );\r\n  }\r\n\r\n  //the widget to return the based on the device mode.\r\n Widget responsiveLayout() {\r\n    var size = MediaQuery.of(context).size;\r\n    var height = size.height;\r\n    var width = size.width;\r\n\r\n    //condition to check the mode of the device\r\n    //if the width is greater than 720 and height,then it's in landscape mode\r\n    //if not,then it is in potrait mode\r\n\r\n   if(width > height && width > 720){\r\n     return Row (\r\n       children: [\r\n         Expanded(flex: 2 , child:ListPage()),\r\n         Expanded(flex:3, child: customerDetailsWithForm()),\r\n       ],\r\n     );\r\n   }else { //potrait mode\r\n      if(selectedCustomer == null) {\r\n        return ListPage();\r\n      }else {\r\n        return customerDetailsWithForm();\r\n      }\r\n   }\r\n }\r\n\r\n\r\n\r\n //List page that has all the customer from the database\r\nWidget ListPage(){\r\n    return Center(\r\n      child: Column(\r\n\r\n      ),\r\n    );\r\n}\r\n\r\n\r\n//customerDetailsWithForm() that has values of the customer\r\nWidget customerDetailsWithForm() {\r\n    return Text(\" \");\r\n}\r\n} //end of CustomerListPageState class\r\n
===================================================================
diff --git a/lib/CustomerListPage.dart b/lib/CustomerListPage.dart
--- a/lib/CustomerListPage.dart	
+++ b/lib/CustomerListPage.dart	
@@ -1,7 +1,9 @@
 import 'package:flutter/cupertino.dart';
 import 'package:flutter/material.dart';
+import 'package:flutter/widgets.dart';
 import 'package:group_project/Customer.dart';
 import 'package:group_project/CustomerDAO.dart';
+import 'package:group_project/Customer_Registration.dart';
 
 import 'CustomerDatabase.dart';
 
@@ -24,7 +26,8 @@
   late CustomerDAO customerdao ;
   Customer ? selectedCustomer;
 
-  List<Customer> customerLists = [];
+  //assign the static variable to the list as this has all the list when the customer is added.
+  List<Customer> customerLists = CustomerRegistrationState.customerLists;
   ///declare all the variables used in the textfield.
   late TextEditingController _firstName;
   late TextEditingController _lastName;
@@ -110,11 +113,37 @@
 
 
 
- //List page that has all the customer from the database
-Widget ListPage(){
+Widget ListPage() {
     return Center(
       child: Column(
+        children: [
+          Text("hello Customer,"),
+          if(customerLists.isEmpty)
+            Text("* There are no items in the list * ",  style: TextStyle(fontSize: 25, fontWeight: FontWeight.bold), )
+          else
+            Flexible(
+                child: ListView.builder(
+                itemCount: customerLists.length,
+                itemBuilder:(context,rowNumber) {
+                    return GestureDetector(
+                          child: Row(
+                            mainAxisAlignment: MainAxisAlignment.spaceAround,
+                            children: [
+                            Text(customerLists[rowNumber].first_name, style: TextStyle(fontSize: 20),),
+                              Text(customerLists[rowNumber].last_name, style: TextStyle(fontSize: 20),),
+    
+                            ],),
+                      onTap: () {
+                        setState(() {
+                          selectedCustomer = customerLists[rowNumber];
+                        });
+                      }
+                    );
+                }
+                )
 
+                //creating a list
+            )],
       ),
     );
 }
